<div class="pagination-component d-flex justify-content-center justify-content-md-between justify-content-lg-between align-items-center flex-wrap">
    <nav aria-label="Page navigation">
        <ul class="pagination mb-0">

            @if (CurrentPageNumber > 1)
            {
                <li class="page-item d-flex align-items-stretch">
                    <a class="page-link d-flex justify-content-center align-items-center" @onclick:preventDefault @onclick="() => PageClicked(1)" href="">
                        <strong>|</strong><i class="fa-solid fa-chevron-left"></i>
                    </a>
                </li>
                <li class="page-item d-flex align-items-stretch">
                    <a class="page-link d-flex justify-content-center align-items-center" @onclick:preventDefault @onclick="() => PageClicked((CurrentPageNumber - 1))" href="">
                        <span class="fa-solid fa-chevron-left"></span>
                    </a>
                </li>
            }
            else
            {
                <li class="page-item disabled d-flex align-items-stretch">
                    <a class="page-link d-flex justify-content-center align-items-center" @onclick:preventDefault href="">
                        <strong>|</strong><i class="fa-solid fa-chevron-left"></i>
                    </a>
                </li>
                <li class="page-item disabled d-flex align-items-stretch">
                    <a class="page-link d-flex justify-content-center align-items-center" aria-disabled="true" @onclick:preventDefault href="">
                        <span class="fa-solid fa-chevron-left"></span>
                    </a>
                </li>
            }

            @if (StartPage != MaxPage)
            {
                var pages = new List<int>();
                for (int i = 1; i <= TotalPages; i++)
                {
                    pages.Add(i);
                }

                if (pages.Any())
                {
                    foreach (var page in pages)
                    {
                        if (CurrentPageNumber == page)
                        {
                            <li class="page-item active">
                                <a class="page-link" @onclick:preventDefault href="">@(page)</a>
                            </li>
                        }
                        else
                        {
                            <li class="page-item @(page < StartPage || page > MaxPage ? "d-none" : "")">
                                <a id="@($"{_elemId}_{page}")" class="page-link" @onclick:preventDefault @onclick="() => PageClicked(page)" href="">@(page)</a>
                            </li>
                        }
                    }
                }
                else
                {
                    <li class="page-item active">
                        <a class="page-link" @onclick:preventDefault href="">1</a>
                    </li>
                }
            }
            else
            {
                <li class="page-item active">
                    <a class="page-link" @onclick:preventDefault href="">1</a>
                </li>
            }

            @if (CurrentPageNumber < TotalPages)
            {
                <li class="page-item d-flex align-items-stretch">
                    <a class="page-link d-flex justify-content-center align-items-center" @onclick:preventDefault @onclick="() => PageClicked((CurrentPageNumber + 1))" href="">
                        <i class="fa-solid fa-chevron-right"></i>
                    </a>
                </li>
                <li class="page-item d-flex align-items-stretch">
                    <a class="page-link d-flex justify-content-center align-items-center" @onclick:preventDefault @onclick="() => PageClicked(TotalPages)" href="">
                        <i class="fa-solid fa-chevron-right"></i><strong>|</strong>
                    </a>
                </li>
            }
            else
            {
                <li class="page-item disabled d-flex align-items-stretch">
                    <a class="page-link d-flex justify-content-center align-items-center" @onclick:preventDefault href="">
                        <i class="fa-solid fa-chevron-right"></i>
                    </a>
                </li>
                <li class="page-item disabled d-flex align-items-stretch">
                    <a class="page-link d-flex justify-content-center align-items-center" @onclick:preventDefault href="">
                        <i class="fa-solid fa-chevron-right"></i><strong>|</strong>
                    </a>
                </li>
            }
        </ul>
    </nav>
    <div class="d-flex align-items-center py-2 ms-2 ms-md-0 ms-lg-0">
        <div class="text-center text-md-end text-lg-end">
            @if (TotalItems > 0)
            {
                <span>@(StartIndex + 1) - @(EndIndex <= TotalItems ? EndIndex : TotalItems) of  @TotalItems @(TotalItems > 1 ? "items" : "item")</span>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public int ItemsPerPage { get; set; } = 10;
    [Parameter] public int TotalItems { get; set; }
    [Parameter] public EventCallback<int> OnClickPage { get; set; }

    int CurrentPageNumber { get; set; } = 1;

    Guid _elemId = Guid.NewGuid();

    public int TotalPages
    {
        get
        {
            if (TotalItems == 0 || ItemsPerPage == 0)
            {
                return 1;
            }

            return (int)Math.Ceiling((double)TotalItems / (double)ItemsPerPage);
        }
    }

    public int StartPage
    {
        get
        {
            int startPage = CurrentPageNumber - 2;
            if (startPage < 1)
            {
                startPage = 1;
            }

            return startPage;
        }
    }

    public int MaxPage
    {
        get
        {
            int maxPage = StartPage + 3;

            if (maxPage > TotalPages)
            {
                maxPage = TotalPages;
            }

            return maxPage;
        }
    }

    public int StartIndex
    {
        get
        {
            return (ItemsPerPage * CurrentPageNumber) - ItemsPerPage;
        }
    }

    public int EndIndex
    {
        get
        {
            return StartIndex + ItemsPerPage;
        }
    }

    async Task PageClicked(int page)
    {
        if (CurrentPageNumber != page)
        {
            CurrentPageNumber = page;
            StateHasChanged();
            await OnClickPage.InvokeAsync(page);
        }
    }

    public void SelectPage(int page)
    {
        CurrentPageNumber = page;
        _ = PageClicked(page);
    }
}